// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  user_id  String  @unique @map("clerk_user_id")
  email    String  @unique
  fullName String?
  role     Role    @default(CUSTOMER)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at")
  lastLogin DateTime? @map("last_login")

  orders           Order[]
  driverDeliveries Delivery[] @relation("DriverDeliveries")
}

model Kitchen {
  id      Int        @id @default(autoincrement())
  name    String
  address String
  menus   MenuItem[]
  orders  Order[]
}

model MenuItem {
  id         Int         @id @default(autoincrement())
  kitchenId  Int
  kitchen    Kitchen     @relation(fields: [kitchenId], references: [id])
  name       String
  priceCents Int
  active     Boolean     @default(true)
  orderItems OrderItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  kitchenId  Int
  status     OrderStatus @default(PENDING)
  totalCents Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User        @relation(fields: [userId], references: [id])
  kitchen  Kitchen     @relation(fields: [kitchenId], references: [id])
  items    OrderItem[]
  delivery Delivery?
  payment  Payment?
}

model OrderItem {
  id      Int @id @default(autoincrement())
  orderId Int
  menuId  Int
  qty     Int @default(1)

  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuId], references: [id])
}

model Delivery {
  id       Int  @id @default(autoincrement())
  orderId  Int  @unique
  driverId Int?

  status      DeliveryStatus @default(ASSIGNED)
  pickedAt    DateTime?
  deliveredAt DateTime?

  order  Order @relation(fields: [orderId], references: [id])
  driver User? @relation("DriverDeliveries", fields: [driverId], references: [id])
}

model Payment {
  id          Int           @id @default(autoincrement())
  orderId     Int           @unique
  stripeId    String
  amountCents Int
  status      PaymentStatus @default(PENDING)

  order Order @relation(fields: [orderId], references: [id])
}

enum Role {
  CUSTOMER
  DRIVER
  MANAGER
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DeliveryStatus {
  ASSIGNED
  PICKED_UP
  DELIVERED
  FAILED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  REFUNDED
  FAILED
}
